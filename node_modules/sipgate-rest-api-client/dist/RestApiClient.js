'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _join = require('lodash/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RestApiClient = function RestApiClient() {
	var _this = this;

	var http = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

	_classCallCheck(this, RestApiClient);

	this.http = null;

	this.getTranslations = function (locale) {
		return _this.http.getUnauthenticated('/translations/' + locale);
	};

	this.destroySession = function () {
		return _this.http.del('/authorization/token');
	};

	this.getAddresses = function () {
		return _this.http.get('/addresses');
	};

	this.getFaxlines = function (userId) {
		return _this.http.get('/' + userId + '/faxlines');
	};

	this.getFaxlineNumbers = function (userId, faxlineId) {
		return _this.http.get('/' + userId + '/faxlines/' + faxlineId + '/numbers');
	};

	this.setFaxlineAlias = function (userId, faxlineId, alias) {
		return _this.http.put('/' + userId + '/faxlines/' + faxlineId, { alias: alias });
	};

	this.setFaxlineTagline = function (userId, faxlineId, tagline) {
		return _this.http.put('/' + userId + '/faxlines/' + faxlineId + '/tagline', { value: tagline });
	};

	this.createFaxline = function (userId) {
		return _this.http.post('/' + userId + '/faxlines');
	};

	this.deleteFaxline = function (userId, faxlineId) {
		return _this.http.del('/' + userId + '/faxlines/' + faxlineId);
	};

	this.getFaxlineCallerId = function (userId, faxlineId) {
		return _this.http.get('/' + userId + '/faxlines/' + faxlineId + '/callerid');
	};

	this.setFaxlineCallerId = function (userId, faxlineId, callerId) {
		return _this.http.put('/' + userId + '/faxlines/' + faxlineId + '/callerid', {
			value: callerId
		});
	};

	this.getPhonelines = function (userId) {
		return _this.http.get('/' + userId + '/phonelines');
	};

	this.createPhoneline = function (userId) {
		return _this.http.post('/' + userId + '/phonelines');
	};

	this.deletePhoneline = function (userId, phonelineId) {
		return _this.http.del('/' + userId + '/phonelines/' + phonelineId);
	};

	this.setPhonelineAlias = function (userId, phonelineId, alias) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId, { alias: alias });
	};

	this.createPhonelineDevice = function (userId, phonelineId, deviceId) {
		return _this.http.post('/' + userId + '/phonelines/' + phonelineId + '/devices', { deviceId: deviceId });
	};

	this.deletePhonelineDevice = function (userId, phonelineId, deviceId) {
		return _this.http.del('/' + userId + '/phonelines/' + phonelineId + '/devices/' + deviceId);
	};

	this.getPhonelineDevices = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/devices');
	};

	this.getPhonelineForwardings = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/forwardings');
	};

	this.getPhonelineNumbers = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/numbers');
	};

	this.getPhonelineParallelforwardings = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/parallelforwardings');
	};

	this.createPhonelineParallelforwarding = function (userId, phonelineId, alias, destination) {
		return _this.http.post('/' + userId + '/phonelines/' + phonelineId + '/parallelforwardings', {
			alias: alias, destination: destination, active: true
		});
	};

	this.setPhonelineParallelforwarding = function (userId, phonelineId, parallelforwardingId, parallelforwarding) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/parallelforwardings/' + parallelforwardingId, parallelforwarding);
	};

	this.getPhonelineVoicemails = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/voicemails');
	};

	this.getPhonelineVoicemailGreetings = function (userId, phonelineId, voicemailId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/voicemails/' + voicemailId + '/greetings');
	};

	this.setVoicemail = function (userId, phonelineId, voicemailId, active, timeout, transcription) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/voicemails/' + voicemailId, { timeout: timeout, active: active, transcription: transcription });
	};

	this.getUser = function (userId) {
		return _this.http.get('/users/' + userId);
	};

	this.setDefaultDevice = function (userId, deviceId) {
		return _this.http.put('/users/' + userId + '/defaultdevice', { deviceId: deviceId });
	};

	this.getUsers = function () {
		return _this.http.get('/users/');
	};

	this.activateGreeting = function (userId, phonelineId, voicemailId, greetingId) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/voicemails/' + voicemailId + '/greetings/' + greetingId, {
			active: true
		});
	};

	this.createGreeting = function (userId, phonelineId, voicemailId, filename, base64Content) {
		return _this.http.post('/' + userId + '/phonelines/' + phonelineId + '/voicemails/' + voicemailId + '/greetings', { filename: filename, base64Content: base64Content });
	};

	this.deleteGreeting = function (userId, phonelineId, voicemailId, greetingId) {
		return _this.http.del('/' + userId + '/phonelines/' + phonelineId + '/voicemails/' + voicemailId + '/greetings/' + greetingId);
	};

	this.changeForwarding = function (userId, phonelineId, forwardings) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/forwardings', { forwardings: forwardings });
	};

	this.setDeviceSettings = function (deviceId, dnd, emergencyAddressId) {
		return _this.http.put('/devices/' + deviceId, { dnd: dnd, emergencyAddressId: emergencyAddressId });
	};

	this.setDeviceAlias = function (deviceId, alias) {
		return _this.http.put('/devices/' + deviceId + '/alias', { value: alias });
	};

	this.resetDevicePassword = function (deviceId) {
		return _this.http.post('/devices/' + deviceId + '/credentials/password');
	};

	this.getDevices = function (userId) {
		return _this.http.get('/' + userId + '/devices');
	};

	this.getDevice = function (deviceId) {
		return _this.http.get('/devices/' + deviceId);
	};

	this.createDevice = function (userId, type) {
		return _this.http.post('/' + userId + '/devices', { type: type });
	};

	this.deleteDevice = function (deviceId) {
		return _this.http.del('/devices/' + deviceId);
	};

	this.getTacs = function () {
		return _this.http.get('/app/tacs');
	};

	this.acceptTacs = function () {
		return _this.http.put('/app/tacs', {
			accepted: true
		});
	};

	this.fetchLinks = function () {
		return _this.http.get('/app/links');
	};

	this.getHistory = function (userId, phonelineId, types, directions, limit) {
		var url = '/' + userId + '/history?phonelineId=' + phonelineId + '&limit=' + limit;
		url += (0, _reduce2.default)(types, function (joined, type) {
			return joined + '&types=' + type;
		}, '');
		url += (0, _reduce2.default)(directions, function (joined, direction) {
			return joined + '&directions=' + direction;
		}, '');

		return _this.http.get(url);
	};

	this.deleteHistoryEntry = function (userId, id) {
		return _this.http.del('/' + userId + '/history/' + id);
	};

	this.getEvents = function () {
		return _this.http.get('/app/events');
	};

	this.deleteEvent = function (id) {
		return _this.http.del('/app/events/' + id);
	};

	this.getCallerId = function (deviceId) {
		return _this.http.get('/devices/' + deviceId + '/callerid');
	};

	this.setCallerId = function (deviceId, callerId) {
		return _this.http.put('/devices/' + deviceId + '/callerid', {
			value: callerId
		});
	};

	this.getTariffAnnouncement = function (deviceId) {
		return _this.http.get('/devices/' + deviceId + '/tariffannouncement');
	};

	this.setTariffAnnouncement = function (deviceId, enabled) {
		return _this.http.put('/devices/' + deviceId + '/tariffannouncement', { enabled: enabled });
	};

	this.getNumbers = function (userId) {
		return _this.http.get('/' + userId + '/numbers');
	};

	this.setNumberRouting = function (numberId, endpointId) {
		return _this.http.put('/numbers/' + numberId, { endpointId: endpointId });
	};

	this.setNumberSettings = function (numberId, endpointId, releaseForMnp, isQuickDial) {
		return _this.http.put('/numbers/' + numberId, {
			endpointId: endpointId, releaseForMnp: releaseForMnp, quickDial: isQuickDial
		});
	};

	this.getPortings = function () {
		return _this.http.get('/portings');
	};

	this.revokePorting = function (portingId) {
		return _this.http.del('/portings/' + portingId);
	};

	this.getWelcome = function () {
		return _this.http.get('/app/welcome');
	};

	this.setWelcome = function (enabled) {
		return _this.http.put('/app/welcome', { enabled: enabled });
	};

	this.initiateClickToDial = function (caller, callee) {
		return _this.http.post('/sessions/calls', { caller: caller, callee: callee });
	};

	this.getPhonelineBlockAnonymous = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/blockanonymous');
	};

	this.setPhonelineBlockAnonymous = function (userId, phonelineId, enabled, target) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/blockanonymous', { enabled: enabled, target: target });
	};

	this.getPhonelineBusyOnBusy = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/busyonbusy');
	};

	this.setPhonelineBusyOnBusy = function (userId, phonelineId, enabled) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/busyonbusy', { enabled: enabled });
	};

	this.getContacts = function () {
		return _this.http.get('/contacts');
	};

	this.getInternalContacts = function () {
		return _this.http.get('/contacts/internal');
	};

	this.deleteContact = function (contactId) {
		return _this.http.del('/contacts/' + contactId);
	};

	this.deleteAllContacts = function () {
		return _this.http.del('/contacts');
	};

	this.importContactsFromCSV = function (base64Content) {
		return _this.http.post('/contacts/import/csv', { base64Content: base64Content });
	};

	this.importContactsFromGoogle = function (token) {
		return _this.http.post('/contacts/import/google', { token: token });
	};

	this.fetchSms = function (userId) {
		return _this.http.get('/' + userId + '/sms');
	};

	this.setSmsAlias = function (userId, smsId, alias) {
		return _this.http.put('/' + userId + '/sms/' + smsId, { alias: alias });
	};

	this.fetchSmsCallerIds = function (userId, smsId) {
		return _this.http.get('/' + userId + '/sms/' + smsId + '/callerids');
	};

	this.createSmsCallerId = function (userId, smsId, phonenumber) {
		return _this.http.post('/' + userId + '/sms/' + smsId + '/callerids', { phonenumber: phonenumber });
	};

	this.verifySmsCallerId = function (userId, smsId, callerId, verificationCode) {
		return _this.http.post('/' + userId + '/sms/' + smsId + '/callerids/' + callerId + '/verification', { verificationCode: verificationCode });
	};

	this.setActiveSmsCallerId = function (userId, smsId, callerId, defaultNumber) {
		return _this.http.put('/' + userId + '/sms/' + smsId + '/callerids/' + callerId, { defaultNumber: defaultNumber });
	};

	this.sendFax = function (faxlineId, recipient, filename, base64Content) {
		return _this.http.post('/sessions/fax', { faxlineId: faxlineId, recipient: recipient, filename: filename, base64Content: base64Content });
	};

	this.resendFax = function (faxlineId, faxId) {
		return _this.http.post('/sessions/fax/resend', { faxlineId: faxlineId, faxId: faxId });
	};

	this.sendSms = function (smsId, recipient, message) {
		return _this.http.post('/sessions/sms', { smsId: smsId, recipient: recipient, message: message });
	};

	this.getAccount = function () {
		return _this.http.get('/account');
	};

	this.verifyAccount = function (verificationCode) {
		return _this.http.put('/account/verified', { verificationCode: verificationCode });
	};

	this.getBalance = function () {
		return _this.http.get('/balance');
	};

	this.getNotifications = function (userId) {
		return _this.http.get('/' + userId + '/notifications');
	};

	this.deleteNotification = function (userId, notificationId) {
		return _this.http.del('/' + userId + '/notifications/' + notificationId);
	};

	this.createVoicemailEmailNotification = function (userId, voicemailId, email) {
		return _this.http.post('/' + userId + '/notifications/voicemail/email', { voicemailId: voicemailId, email: email });
	};

	this.createVoicemailSmsNotification = function (userId, voicemailId, number) {
		return _this.http.post('/' + userId + '/notifications/voicemail/sms', { voicemailId: voicemailId, number: number });
	};

	this.createFaxEmailNotification = function (userId, faxlineId, email, direction) {
		return _this.http.post('/' + userId + '/notifications/fax/email', { faxlineId: faxlineId, email: email, direction: direction });
	};

	this.createFaxSmsNotification = function (userId, faxlineId, number, direction) {
		return _this.http.post('/' + userId + '/notifications/fax/sms', { faxlineId: faxlineId, number: number, direction: direction });
	};

	this.createCallEmailNotification = function (userId, endpointId, email, direction, cause) {
		return _this.http.post('/' + userId + '/notifications/call/email', { endpointId: endpointId, email: email, direction: direction, cause: cause });
	};

	this.createCallSmsNotification = function (userId, endpointId, number, direction, cause) {
		return _this.http.post('/' + userId + '/notifications/call/sms', { endpointId: endpointId, number: number, direction: direction, cause: cause });
	};

	this.createFaxReportNotification = function (userId, faxlineId, email) {
		return _this.http.post('/' + userId + '/notifications/fax/report', { faxlineId: faxlineId, email: email });
	};

	this.createSmsEmailNotification = function (userId, endpointId, email) {
		return _this.http.post('/' + userId + '/notifications/sms/email', { endpointId: endpointId, email: email });
	};

	this.fetchRestrictions = function (userId, restrictions) {
		var url = '/restrictions';
		if (typeof userId === 'string') {
			url += '/?userId=' + userId;
			if (typeof restrictions === 'string') {
				url += '&' + restrictions;
			} else if (Array.isArray(restrictions)) {
				url += '&' + (0, _join2.default)((0, _map2.default)(restrictions, function (restriction) {
					return 'restriction=' + restriction;
				}), '&');
			}
		}

		return _this.http.get(url);
	};

	this.getSipgateIo = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/sipgateio');
	};

	this.setSipgateIo = function (userId, phonelineId, sipgateIo) {
		return _this.http.put('/' + userId + '/phonelines/' + phonelineId + '/sipgateio', sipgateIo);
	};

	this.getSipgateIoLog = function (userId, phonelineId) {
		return _this.http.get('/' + userId + '/phonelines/' + phonelineId + '/sipgateio/log');
	};

	this.getUserInfo = function () {
		return _this.http.get('/authorization/userinfo');
	};

	this.getLocalprefix = function (deviceId) {
		return _this.http.get('/devices/' + deviceId + '/localprefix');
	};

	this.setLocalprefix = function (deviceId, localprefix, active) {
		return _this.http.put('/devices/' + deviceId + '/localprefix', {
			value: localprefix, active: active
		});
	};

	this.activateSim = function (userId, deviceId, simId) {
		return _this.http.post('/' + userId + '/devices/' + deviceId + '/sim', { simId: simId });
	};

	this.deactivateSim = function (userId, deviceId) {
		return _this.http.del('/' + userId + '/devices/' + deviceId + '/sim');
	};

	this.getContingents = function (userId, deviceId) {
		return _this.http.get('/' + userId + '/devices/' + deviceId + '/contingents');
	};

	this.orderSim = function (userId, deviceId, addressId) {
		return _this.http.post('/' + userId + '/devices/' + deviceId + '/sim/orders', { addressId: addressId });
	};

	this.getSingleRowDisplay = function (deviceId) {
		return _this.http.get('/devices/' + deviceId + '/singlerowdisplay');
	};

	this.setSingleRowDisplay = function (deviceId, enabled) {
		return _this.http.put('/devices/' + deviceId + '/singlerowdisplay', { enabled: enabled });
	};

	this.getGroups = function (userId) {
		var url = '/groups';
		if (typeof userId === 'string') {
			url += '?userId=' + userId;
		}
		return _this.http.get(url);
	};

	this.getGroupNumbers = function (groupId) {
		return _this.http.get('/groups/' + groupId + '/numbers');
	};

	this.getGroupUsers = function (groupId) {
		return _this.http.get('/groups/' + groupId + '/users');
	};

	this.createGroupDevice = function (groupId, deviceId) {
		return _this.http.post('/groups/' + groupId + '/devices', { deviceId: deviceId });
	};

	this.deleteGroupDevice = function (groupId, deviceId) {
		return _this.http.del('/groups/' + groupId + '/devices/' + deviceId);
	};

	this.getGroupVoicemail = function (groupId) {
		return _this.http.get('/groups/' + groupId + '/voicemail');
	};

	this.getGroupFaxline = function (userId) {
		var url = '/groupfaxlines';
		if (typeof userId === 'string') {
			url += '?userId=' + userId;
		}
		return _this.http.get(url);
	};

	this.getGroupFaxlineCallerId = function (faxlineId) {
		return _this.http.get('/groupfaxlines/' + faxlineId + '/callerid');
	};

	this.getGroupFaxlineNumbers = function (faxlineId) {
		return _this.http.get('/groupfaxlines/' + faxlineId + '/numbers');
	};

	this.validateQuickDialNumbers = function (quickDialNumber) {
		return _this.http.get('/numbers/quickdial/validation/' + quickDialNumber);
	};

	this.createQuickDialNumber = function (userId, number) {
		return _this.http.post('/numbers/quickdial', { userId: userId, number: number });
	};

	this.setQuickDialNumber = function (userId, numberId, number) {
		return _this.http.put('/numbers/quickdial/' + numberId, { userId: userId, number: number });
	};

	this.deleteQuickDialNumber = function (numberId) {
		return _this.http.del('/numbers/quickdial/' + numberId);
	};

	this.http = http;
};

exports.default = RestApiClient;